<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Audience" xml:space="preserve">
    <value>Who can attend</value>
    <comment>The value for audience text</comment>
  </data>
  <data name="AudiencePrivate" xml:space="preserve">
    <value>Private</value>
    <comment>The private event text</comment>
  </data>
  <data name="AudiencePublic" xml:space="preserve">
    <value>Public</value>
    <comment>The public event text</comment>
  </data>
  <data name="AutoRegisteredCardSubTitle" xml:space="preserve">
    <value>You have been automatically registered for this event.</value>
    <comment>Auto registration card sub title</comment>
  </data>
  <data name="AutoRegisteredHeader" xml:space="preserve">
    <value>Mandatory event!</value>
    <comment>Title for auto registration card sent to user</comment>
  </data>
  <data name="CancellationCardSubTitle" xml:space="preserve">
    <value>We regret to inform you that the following event has been cancelled.</value>
    <comment>Cancellation card subtitle</comment>
  </data>
  <data name="CancellationHeader" xml:space="preserve">
    <value>Event cancelled!</value>
    <comment>Cancellation card title</comment>
  </data>
  <data name="Category" xml:space="preserve">
    <value>Category</value>
    <comment>The value for category</comment>
  </data>
  <data name="CloseRegistrationCardButton" xml:space="preserve">
    <value>Close registration</value>
    <comment>Close registrations card button</comment>
  </data>
  <data name="CreatedByLabel" xml:space="preserve">
    <value>Created by</value>
    <comment>Created by user label text on card</comment>
  </data>
  <data name="CreateEventButtonWelcomeCard" xml:space="preserve">
    <value>Add event</value>
    <comment>LnD team welcome card add event button text</comment>
  </data>
  <data name="CreateEventCardTitleText" xml:space="preserve">
    <value>Create a new event</value>
    <comment>The create event card title</comment>
  </data>
  <data name="DailyReminderCardTitle" xml:space="preserve">
    <value>Tomorrow's events</value>
    <comment>The reminder card title for daily reminder</comment>
  </data>
  <data name="DateAndTimeLabel" xml:space="preserve">
    <value>Date &amp; time</value>
    <comment>Date and time label for notification cards</comment>
  </data>
  <data name="DescriptionLabelCard" xml:space="preserve">
    <value>Description</value>
    <comment>Event description label in cards</comment>
  </data>
  <data name="EditEventCardButton" xml:space="preserve">
    <value>Edit event</value>
    <comment>Edit event card button</comment>
  </data>
  <data name="EndDate" xml:space="preserve">
    <value>End date</value>
    <comment>The value for end date text</comment>
  </data>
  <data name="ErrorTitle" xml:space="preserve">
    <value>Error</value>
    <comment>The task module title for error page</comment>
  </data>
  <data name="EventDescription" xml:space="preserve">
    <value>Description</value>
    <comment>The value for event description text</comment>
  </data>
  <data name="EventName" xml:space="preserve">
    <value>Event name</value>
    <comment>The value for event name text</comment>
  </data>
  <data name="ExportDetailsCardButton" xml:space="preserve">
    <value>Export registration data</value>
    <comment>Export details card button</comment>
  </data>
  <data name="LoadingImageAltText" xml:space="preserve">
    <value>Loading image</value>
    <comment>The alternative text for loading an image</comment>
  </data>
  <data name="NumberOfRegistrations" xml:space="preserve">
    <value>Registrations</value>
    <comment>The value for number of registrations</comment>
  </data>
  <data name="RegisterButton" xml:space="preserve">
    <value>Register</value>
    <comment>Adaptive card button text for invoking register event task module</comment>
  </data>
  <data name="RegisteredUsers" xml:space="preserve">
    <value>Registered participants</value>
    <comment>The value for registered users text</comment>
  </data>
  <data name="ReminderCardRegisteredEventButton" xml:space="preserve">
    <value>View registration</value>
    <comment>The button text to view registered events</comment>
  </data>
  <data name="ReminderCardTitle" xml:space="preserve">
    <value>Reminder!</value>
    <comment>The reminder card title</comment>
  </data>
  <data name="StartDate" xml:space="preserve">
    <value>Start date</value>
    <comment>The value for start date text</comment>
  </data>
  <data name="TeamsMeetingText" xml:space="preserve">
    <value>Teams meeting</value>
    <comment>The event venue value if the meeting location is teams meeting</comment>
  </data>
  <data name="TrainingType" xml:space="preserve">
    <value>Event type</value>
    <comment>The value for training type</comment>
  </data>
  <data name="TrainingTypeInPerson" xml:space="preserve">
    <value>In-person</value>
    <comment>The in-person event text</comment>
  </data>
  <data name="TrainingTypeLiveEvent" xml:space="preserve">
    <value>Live event</value>
    <comment>The live event text</comment>
  </data>
  <data name="Venue" xml:space="preserve">
    <value>Venue</value>
    <comment>The value for venue text</comment>
  </data>
  <data name="ViewAllEventsCardButton" xml:space="preserve">
    <value>View all events</value>
    <comment>Card button text to navigate user on all events tab</comment>
  </data>
  <data name="WeeklyReminderCardTitle" xml:space="preserve">
    <value>Next week events</value>
    <comment>The reminder card title for weekly reminder</comment>
  </data>
  <data name="WelcomeCardTeamContentFooter" xml:space="preserve">
    <value>Ready to get started? Select {0} below:</value>
    <comment>Card content footer</comment>
  </data>
  <data name="WelcomeCardPersonalDiscoverButtonText" xml:space="preserve">
    <value>Discover</value>
    <comment>Discover action button in welcome card</comment>
  </data>
  <data name="WelcomeCardPersonalIntro" xml:space="preserve">
    <value>Looking forward to discover and participate in new events? I am here to help you discover new events, participate in them &amp; keep track of their occurance. So, lets get started!</value>
    <comment>App intro text in welcome card for team</comment>
  </data>
  <data name="WelcomeCardPersonalPoint1" xml:space="preserve">
    <value>- Discover &amp; explore all events.</value>
    <comment>First point highlighting feature of app</comment>
  </data>
  <data name="WelcomeCardPersonalPoint2" xml:space="preserve">
    <value>- Register to the events you like.</value>
    <comment>Second point highlighting feature of app</comment>
  </data>
  <data name="WelcomeCardPersonalPoint3" xml:space="preserve">
    <value>- Keep a track of all your completed events.</value>
    <comment>Third point highlighting feature of app</comment>
  </data>
  <data name="WelcomeCardPersonalPoint4" xml:space="preserve">
    <value>- Get notified about all your activities &amp; receive reminders of your upcoming registered events.</value>
    <comment>Forth point highlighting feature of app</comment>
  </data>
  <data name="WelcomeCardTeamHeading" xml:space="preserve">
    <value>Specifically, I can help you:</value>
    <comment>Welcome card content heading for team</comment>
  </data>
  <data name="WelcomeCardTeamIntro" xml:space="preserve">
    <value>I'm the Employee Training bot, and I can help you make the most of the learning opportunites offered by your org.</value>
    <comment>App intro text in welcome card for team</comment>
  </data>
  <data name="WelcomeCardTeamPoint1" xml:space="preserve">
    <value>- Explore all upcoming training events</value>
    <comment>First point highlighting feature of app</comment>
  </data>
  <data name="WelcomeCardTeamPoint2" xml:space="preserve">
    <value>- Register for events</value>
    <comment>Second point highlighting feature of app</comment>
  </data>
  <data name="WelcomeCardTeamPoint3" xml:space="preserve">
    <value>- Keep a track of completed training</value>
    <comment>Third point highlighting feature of app</comment>
  </data>
  <data name="WelcomeCardTeamPoint4" xml:space="preserve">
    <value>- Get helpful notification and reminders</value>
    <comment>Forth point highlighting feature of app</comment>
  </data>
  <data name="WelcomeCardTitle" xml:space="preserve">
    <value>Welcome!</value>
    <comment>Welcome card title for personal and team scope</comment>
  </data>
  <data name="WelcomeCardPersonalContentFooter" xml:space="preserve">
    <value>Ready to get started? Select {0} below:</value>
    <comment>Welcome card footer message for personal scope</comment>
  </data>
  <data name="EventUpdatedCardTitle" xml:space="preserve">
    <value>Event updated!</value>
    <comment>The title of a card in personal scope when an event gets updated</comment>
  </data>
  <data name="ErrorMessage" xml:space="preserve">
    <value>Something went wrong. Please try after some time.</value>
    <comment>The error message displayed when bot fails to send card</comment>
  </data>
  <data name="CalendarEventLocationText" xml:space="preserve">
    <value>Location: {0}</value>
    <comment>The event location placeholder text in calendar event body if the event type is in-person</comment>
  </data>
  <data name="CalendarEventLiveEventURLText" xml:space="preserve">
    <value>Live event URL: {0}</value>
    <comment>The live event URL placeholder text in calendar event body if the event type is live event</comment>
  </data>
</root>